plugins:
- rubocop-rake
- rubocop-rspec
require:
- ./cops/to_pdf_no_debug.rb
AllCops:
  NewCops: enable
  TargetRubyVersion: 2.7
Gemspec/RequireMFA:
  Enabled: false
Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation
Layout/CaseIndentation:
  EnforcedStyle: end
Layout/EndOfLine:
  EnforcedStyle: lf
Layout/EmptyLineAfterGuardClause:
  Enabled: false # reason: unnecessary extra space
Layout/EmptyLinesAfterModuleInclusion:
  Enabled: false # reason: no
Layout/HeredocIndentation:
  Enabled: false # reason: makes it harder to understand what indentation is significant
Layout/LeadingCommentSpace:
  Enabled: false # reason: this is just nitpicky
Layout/LineLength:
  Enabled: false # FIXME enable me
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented
Layout/ParameterAlignment:
  EnforcedStyle: with_fixed_indentation
  IndentationWidth: 4
Layout/SpaceAroundOperators:
  EnforcedStyleForExponentOperator: space
Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: false
Lint/AmbiguousBlockAssociation:
  Exclude: [ spec/*.rb ]
Lint/AmbiguousOperatorPrecedence:
  Enabled: false
Lint/ConstantDefinitionInBlock:
  Exclude: [ spec/*.rb ]
Lint/EmptyWhen:
  Enabled: false # reason: an empty when can be important for excluding matches
Lint/FloatComparison:
  Exclude: [ spec/*.rb ]
Lint/LiteralAssignmentInCondition:
  Enabled: false # reason: we know what we're doing; sometimes it's necessary to assign a literal value
Lint/MissingSuper:
  Enabled: false # FIXME consider enabling
Lint/NonAtomicFileOperation:
  Enabled: false
Lint/ParenthesesAsGroupedExpression:
  Enabled: false # reason: we prefer to enclose assignments
Lint/SymbolConversion:
  Enabled: false # reason: requires use of :"static#{variable}" which is not the style we prefer
Metrics/AbcSize:
  Enabled: false
Metrics/BlockLength:
  Enabled: false
Metrics/BlockNesting:
  Max: 10
Metrics/ClassLength:
  Enabled: false
Metrics/CyclomaticComplexity:
  Enabled: false
Metrics/MethodLength:
  Enabled: false
Metrics/ModuleLength:
  Enabled: false
Metrics/ParameterLists:
  Max: 10
  MaxOptionalParameters: 10
Metrics/PerceivedComplexity:
  Enabled: false
Naming/AccessorMethodName:
  Enabled: false # reason: needed to override built-in method names
Naming/ConstantName:
  Enabled: false # FIXME consider reenabling
Naming/FileName:
  Enabled: false # reason: needed to conform to Prawn ecosystem
Naming/HeredocDelimiterNaming:
  ForbiddenDelimiters:
  - !ruby/regexp '/^\s*EO[A-Z]\s*$/'
Naming/InclusiveLanguage:
  Enabled: true
Naming/PredicateMethod:
  Enabled: false # reason: we like the style we use
Naming/MethodParameterName:
  Enabled: false # reason: needed to conform to Prawn ecosystem
Naming/VariableNumber:
  Enabled: false # reason: this is just nitpicky
RSpec/BeEql:
  Enabled: false # reason: can lead to cryptic error messages when comparing integers
RSpec/ContextWording:
  Enabled: false # reason: we don't always use BBD-language
RSpec/DescribeClass:
  Enabled: false
RSpec/ExampleLength:
  Enabled: false
RSpec/ExampleWording:
  Enabled: false
RSpec/MetadataStyle:
  Enabled: false # reason: this rule is just confused
RSpec/MultipleExpectations:
  Max: 25 # FIXME get this down to 15
RSpec/NamedSubject:
  Enabled: false
RSpec/NoExpectationExample:
  Enabled: false
RSpec/Pending:
  Enabled: false # reason: incorrectly detects spec as proc as pending
RSpec/RemoveConst:
  Enabled: false # reason: we need this capability
RSpec/SpecFilePathFormat:
  Enabled: false # reason: we prefer to name spec files the way we want to name them
RSpec/VoidExpect:
  Enabled: false
Style/AccessorGrouping:
  EnforcedStyle: separated
Style/Alias:
  EnforcedStyle: prefer_alias
Style/ArrayCoercion:
  Enabled: false # reason: using [*values] is faster
Style/AsciiComments:
  Enabled: false # reason: this is just nitpicky
Style/Attr:
  Enabled: false # reason: gets confused by Asciidoctor's attr method
Style/BlockDelimiters:
  EnforcedStyle: line_count_based # FIXME we want this to be line_count_based except when chaining
Style/CaseEquality:
  Enabled: false # reason: === is a useful operator
Style/CharacterLiteral:
  Enabled: false # reason: ? can make single characters easier to type
Style/ClassAndModuleChildren:
  Enabled: false # reason: both forms are useful
Style/ClassVars:
  Enabled: false # reason: an important language feature
Style/CommandLiteral:
  EnforcedStyle: percent_x
Style/CommentAnnotation:
  Keywords:
  - TODO
  - FIXME
  - HACK
  - NOTE
  - QUESTION
  RequireColon: true
Style/ConditionalAssignment:
  EnforcedStyle: assign_inside_condition
  IncludeTernaryExpressions: false
Style/Documentation:
  Enabled: false # FIXME reenable
Style/EmptyStringInsideInterpolation:
  Enabled: false # reason: wtf not?
Style/ExplicitBlockArgument:
  Enabled: false # reason: yield is fine
Style/FetchEnvVar:
  Enabled: false # reason: just no
Style/FormatString:
  EnforcedStyle: sprintf
Style/FormatStringToken:
  EnforcedStyle: unannotated
Style/GuardClause:
  MinBodyLength: 15
Style/HashAsLastArrayItem:
  EnforcedStyle: no_braces
Style/HashSyntax:
  EnforcedStyle: ruby19
Style/IfWithBooleanLiteralBranches:
  AllowedMethods:
  - empty?
  - nil_or_empty?
Style/IfUnlessModifier:
  Enabled: false # reason: this gets crazy
Style/IfUnlessModifierOfIfUnless:
  Enabled: false # reason: we prefer this style to avoid extra nesting
Style/InfiniteLoop:
  Enabled: false # reason: loop is measurably slower than while true
Style/ItAssignment:
  Enabled: false # reason: used a lot, and using it is benign
Style/MapToHash:
  Enabled: false # reason: not supported in JRuby < 9.3
Style/MapToSet:
  Enabled: false # reason: not supported in JRuby < 9.3
Style/MethodCallWithArgsParentheses:
  Enabled: true
  EnforcedStyle: omit_parentheses
Style/MethodDefParentheses:
  EnforcedStyle: require_no_parentheses
Style/MultilineBlockChain:
  Enabled: false # reason: no reason not to allow method call on block result
Style/MultilineIfModifier:
  Enabled: false # reason: we prefer this style to avoid extra nesting
Style/MultilineTernaryOperator:
  Enabled: false # reason: a ternary is a ternary
Style/MultipleComparison:
  Enabled: false # reason: faster than the alternative of using Array#include?
Style/MutableConstant:
  Enabled: false # reason: freezing constants is pendantic
Style/NestedTernaryOperator:
  Enabled: false # reason: a ternary is a ternary
Style/NumericLiterals:
  Enabled: false # reason: makes large numbers unreadable and harder to copy
Style/NumericPredicate:
  EnforcedStyle: comparison
Style/ObjectThen:
  Enabled: false # reason: not yet available in minimum JRuby version
Style/OpenStructUse:
  Enabled: false # reason: the theming system relies on OpenStruct
Style/OptionalBooleanParameter:
  Enabled: false # reason: invasive
Style/ParallelAssignment:
  Enabled: false # reason: an important language feature
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    default: "()"
    "%i": "()"
    "%r": "//"
    "%w": "()"
    "%W": "()"
Style/PerlBackrefs:
  Enabled: false # reason: an important language feature
Style/RedundantHeredocDelimiterQuotes:
  Enabled: false # reason: we know what we are doing
Style/RedundantParentheses:
  Enabled: false # reason: sometimes the parentheses just make it clearer; this rule is too aggressive
Style/RedundantSelfAssignmentBranch:
  Enabled: false # reason: sometimes the result is just to make no change
Style/RedundantStringEscape:
  Enabled: false # reason: this rule crashes RuboCop
Style/RescueModifier:
  Enabled: false # reason: a useful language feature
Style/RescueStandardError:
  EnforcedStyle: implicit
Style/SlicingWithRange:
  Enabled: false # reason: not supported in JRuby < 9.3
Style/SpecialGlobalVars:
  EnforcedStyle: use_perl_names
Style/StringConcatenation:
  Enabled: false # reason: string concatenation can be faster
Style/SuperWithArgsParentheses:
  Enabled: false # reason: hate it
Style/SymbolArray:
  EnforcedStyle: brackets
Style/TernaryParentheses:
  Enabled: false # reason: this rule has become too buggy and gets it wrong most of the time
  EnforcedStyle: require_parentheses_when_complex
Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma
